#include<stdio.h>
#include<string.h>
#include<math.h>


#define NumofVar 26
#define NumofFunc (6+6+5+3)

char    *fname[NumofFunc] = {
 "ACOS", "ASIN", "ATAN", "COS", "SIN", "TAN",        // 6개
 "COSH", "SINH", "TANH", "ACOSH", "ASINH", "ATANH",  // 6개
 "EXP", "LOG", "LOG10",                              // 3개
 "SQRT", "FABS", "FLOOR", };                         // 3개
double  table_v[NumofVar];      // 일반 변수 Table A~Z 26개
double  table_a[NumofVar][20];  // 배열 변수 Table AA~ZZ 26개
char    flag_v[NumofVar];       // 일반 변수 Flag
int     length_a[NumofVar];     // 각 배열변수의 길이(원소 갯수)

void    parsing(char*);             // 명령어 Parsing
double  parenthesis(char*, int*);   // 괄호 추출
double  calculation(char*);         // 수식 계산
void    assignment(char*);          // 대입 연산자 계산
void    aCommand(char*);            // 배열 변수가 있는 수식 계산
double  funcArit(int, double);      // 수학 함수 호출

int is_in(char *String, char c)
// String 에 c 가 있는지 검사
// 있으면 1, 없으면 0을 리턴
{
 int i;
 for (i = 0; String[i] != '\0'; ++i)

  if (String[i] == c) return 1;
 return 0;
}

int whereis(char *String, char *key)
// String에 key가 있는 위치를 리턴
// key가 String에 존재하지 않으면 -1을 리턴
{
 int i, j, flag = 0;
 for (i = 0; String[i] != '\0'; ++i) {
  for (j = 0; key[j] != '\0' && key[j] == String[i + j]; ++j);
  if (key[j] == '\0') return i;
 }

 return -1;
}

double atod(char *String)
// Ascii to Double
// ascii 값으로 되어 있는 실수 문자열을 double형으로 반환
{
 int dplace = 1;
 double value = 0;

 while (*String != '\0') {
  if (*String <= '9' && *String >= '0')
   if (dplace == 1) value = value * 10 + *String - '0';
   else {
    value += (double)(*String - '0') / dplace;
    dplace *= 10;
   }
  else if (*String == '.') dplace *= 10;
  ++String;
 }
 return value;
}

int main(void)
{
 FILE *fp;
 char buffer[127];
 int i, j, cnt;

 // 시작
 printf("Start\n");

 for (i = 0; i < NumofVar; ++i) {
  flag_v[i] = 0;
  length_a[i] = 0;
 }

 while (1) {
  // 명령어를 입력받음
  printf("=>");
  cnt = 0;
  while (1) {
   buffer[cnt] = getchar();
   if (buffer[cnt] == '\n') {
    buffer[cnt] = '\0';
    break;
   }
   ++cnt;
  }

  // save 로 시작하면 명령
  if (whereis(buffer, "save ") == 0) {
   fp = fopen(buffer + 5, "w");

   for (i = 0; i < 26; ++i)
    fprintf(fp, "%d ", flag_v[i]);
   fprintf(fp, "\n");

   for (i = 0; i < 26; ++i)
    fprintf(fp, "%d ", length_a[i]);
   fprintf(fp, "\n");

   for (i = 0; i < 26; ++i)
    if (flag_v[i]) fprintf(fp, "%f\n", table_v[i]);

   for (i = 0; i < 26; ++i)
    for (j = 0; j < length_a[i]; ++j)
     fprintf(fp, "%f\n", table_a[i][j]);

   fclose(fp);
   continue;
  }

  // load 로 시작하는 명령
  if (whereis(buffer, "load ") == 0) {
   fp = fopen(buffer + 5, "r");

   for (i = 0; i < 26; ++i)
    fscanf(fp, "%d", &flag_v[i]);
   for (i = 0; i < 26; ++i)
    fscanf(fp, "%d", &length_a[i]);

   for (i = 0; i < 26; ++i)
    if (flag_v[i])
     fscanf(fp, "%lf", &table_v[i]);

   for (i = 0; i < 26; ++i)
    for (j = 0; j < length_a[i]; ++j)
     fscanf(fp, "%lf", &table_a[i][j]);

   fclose(fp);
   continue;
  }

  // 공백 문자 제거
  for (i = 0; buffer[i] != '\0'; ++i)
   while (buffer[i] == ' ')
    for (cnt = i; buffer[cnt] != '\0'; ++cnt)
     buffer[cnt] = buffer[cnt + 1];

  // 소문자를 대문자로 교체
  for (i = 0; buffer[i] != '\0'; ++i)
   if (buffer[i] <= 'z' && buffer[i] >= 'a')
    buffer[i] += 'A' - 'a';

  // end 명령일 경우 프로그램을 종료
  if (!strcmp(buffer, "END")) break;

  // 명령어 Parsing
  parsing(buffer);
 }
}

void parsing(char *command)
{
 int i;
 double result;

 // 명령어에 '=' 이 있으면 대입 명령으로 간주하여
 // assignment로 명령어를 넘김
 //
 if (is_in(command, '=')) {
  assignment(command);
  return;
 }

 // 영문자가 2개 반복되어 출현하고 다음 문자가 '(' 이 아닌경우
 // 배열 변수로 간주하여 aCommand(Array Command)로 명령어를 넘김
 for (i = 0; command[i + 1] != '\0'; ++i)
  if ((command[i] <= 'Z' && command[i] >= 'A') && command[i + 1] == command[i] && command[i + 2] != '(') {
   aCommand(command);
   return;
  }

 // 위에 나온 두가지 조건이 아닌경우
 // 일반 변수를 포함하는 수식으로 간주하여 calculation 으로 넘겨서 계산
 result = calculation(command);

 // 계산된 값이 NAN(Not a Number)인 경우 에러를 출력한다
 // (NAN은 NAN <= 0 || NAN >= 0 을 만족하지 않는다)
 // NAN이 아니면 계산된 값을 출력한다
 if (!(result <= 0 || result >= 0)) printf("= Undefined Symbol\n");
 else printf("= %f\n", result);
}

double parenthesis(char *expr, int *i)
{
 int cntb = 0, cntp = 1;
 char buffer[127];
 double paren;

 // 괄호가 포함된 수식에서 최외곽 괄호를 추출하여 계산한다
 // cntp 는 아직 닫혀지지 않은 괄호의 갯수
 // cntp 가 0이 되면 현재까지 추출한 문자열을 calculation으로 넘겨서 계산한다
 // cntp 가 0이 되기 전에 '\0'을 만나면 NAN을 리턴한다
 // 계산된 값이 NAN이라도 NAN을 리턴한다
 while (cntp) {
  ++(*i);
  if (expr[*i] == '\0') return 0;
  if (expr[*i] == '(') ++cntp;
  if (expr[*i] == ')') --cntp;
  buffer[cntb++] = expr[*i];
 }
 buffer[--cntb] = '\0';
 paren = calculation(buffer);
 if (!(paren <= 0 || paren >= 0)) return 0;
 else return paren;
}

double calculation(char *expr)
{
 int i, j;
 int cv = 0, co = 0, cb;
 double v[100], paren;
 char o[100], buf[20], ar, prefix = 'd';

 // v라는 배열에는 숫자값을 집어넣고
 // o라는 배열에는 연산자를 집어넣는다
 // 괄호가 나오면 괄호를 먼저 계산하여 v배열에 집어넣고
 // 숫자가 나오면 그냥 v배열에 넣는다
 // 연산자가 나오면 o배열에 넣고
 // 일반 변수가 나오면 table_v에서 읽어서 v배열에 넣는다
 // 배열 원소가 나오면 table_a에서 읽어서 v배열에 넣고
 // 수학 함수가 나오면 수학 함수를 계산하여 v배열에 넣는다

 for (i = 0; expr[i] != '\0'; ++i) {
  // 괄호인 경우
  if (expr[i] == '(') {
   paren = parenthesis(expr, &i);
   if (!(paren <= 0 || paren >= 0)) return 0;
   v[cv++] = paren;
   if (prefix == '-') v[cv - 1] = -v[cv - 1];
  }

  // 숫자인 경우
  else if (expr[i] <= '9' && expr[i] >= '0' || expr[i] == '.') {
   cb = 0;
   while (expr[i] <= '9' && expr[i] >= '0' || expr[i] == '.')
    buf[cb++] = expr[i++];
   buf[cb] = '\0';
   v[cv++] = atod(buf);
   if (prefix == '-') v[cv - 1] = -v[cv - 1];
   --i;
  }

  // 연산자인 경우
  else if (is_in("*/+-", expr[i])) {
   if (co == cv) {
    if (is_in("*/", expr[i]) || prefix != 'd') return 0;
    else prefix = expr[i];
   }
   else {
    prefix = 'd';
    o[co++] = expr[i];
   }
  }

  // 영문자의 경우 다음의 3가지로 나누어진다
  else if (expr[i] <= 'Z' && expr[i] >= 'A') {

   // 일반 변수인 경우
   if (expr[i + 1] > 'Z' || expr[i + 1] < 'A') {
    if (flag_v[expr[i] - 'A']) {
     v[cv++] = table_v[expr[i] - 'A'];
     if (prefix == '-') v[cv - 1] = -v[cv - 1];
    }
    else return 0;
   }

   // 배열의 원소인 경우
   else if (expr[i] == expr[i + 1] && expr[i + 2] == '(') {
    ar = expr[i];
    i += 2;
    paren = parenthesis(expr, &i);
    if (!(paren <= 0 || paren >= 0)) return 0;
    if ((int)paren < length_a[ar - 'A']) {
     v[cv++] = table_a[ar - 'A'][(int)paren];
     if (prefix == '-') v[cv - 1] = -v[cv - 1];
    }
   }

   // 수학함수인 경우
   else {
    for (j = 0; j < NumofFunc; ++j)
     if (whereis(expr + i, fname[j]) == 0 && expr[strlen(fname[j]) + i] == '(') {
      i += strlen(fname[j]);
      paren = parenthesis(expr, &i);
      if (!(paren <= 0 || paren >= 0)) return 0;
      v[cv++] = funcArit(j, paren);
      if (prefix == '-') v[cv - 1] = -v[cv - 1];
      break;
     }
   }
  }
 }

 // 정상적인 수식의 경우 o배열의 길이가 c배열의 길이보다 1개 더 많다
 if (co + 1 != cv) return 0;

 // 먼저 o배열에서 *나 /를 찾아서 계산하고 계산된 부분에는 d를 입력한다
 // * d : Don't Mind
 // 계산은 v배열의 i와 v배열의 i+1을 o배열에 있는 연산자로 계산하고
 // 계산된 결과를 v배열의 i+1에 저장한다
 for (i = 0; i < co; ++i) {
  if (is_in("+-", o[i])) continue;

  if (o[i] == '*') v[i + 1] = v[i] * v[i + 1];
  if (o[i] == '/') v[i + 1] = v[i] / v[i + 1];

  o[i] = 'd';
 }

 // o배열에는 +와 -만 남아있으므로 +와 -를 계산하는데
 // v[i]와 i+1 부터 o배열의 d가 아닌 j를 구해서
 // o배열에 있는 연산자로 계산하고 v[j]에 저장한다
 for (i = 0; i < co; ++i) {
  if (o[i] == 'd') continue;

  for (j = i + 1; o[j] == 'd' && j < co; ++j);

  if (o[i] == '+') v[j] = v[i] + v[j];
  if (o[i] == '-') v[j] = v[i] - v[j];
 }

 // v배열의 마지막 원소(계산결과)를 리턴한다
 return v[co];
}

void assignment(char *command)
{
 int i, j, cnt = 0;
 double result[20];

 // 배열변수
 // ',' 를 '\0'로 바꾸고 Calculation 한다음 table_a에 저장한다
 if ((command[0] <= 'Z' && command[0] >= 'A') && command[1] == command[0] && command[2] == '=') {
  j = 3;
  for (i = 3; command[i] != '\0'; ++i)
   if (command[i] == ',') {
    command[i] = '\0';
    result[cnt] = calculation(command + j);
    if (!(result[cnt] <= 0 || result[cnt] >= 0)) {
     printf("= Undefined Symbol\n");
     return;
    }
    ++cnt;
    j = i + 1;
   }
  result[cnt] = calculation(command + j);
  if (!(result[cnt] <= 0 || result[cnt] >= 0)) {
   printf("= Undefined Symbol\n");
   return;
  }
  length_a[command[0] - 'A'] = ++cnt;
  for (i = 0; i < cnt; ++i)
   table_a[command[0] - 'A'][i] = result[i];
  return;
 }

 // 일반변수
 // '=' 다음 부분을 Calculation 한 후 table_v에 저장한다
 if (command[0] <= 'Z' && command[0] >= 'A' && command[1] == '=') {
  result[0] = calculation(command + 2);
  if (result[0] <= 0 || result[0] >= 0) {
   flag_v[command[0] - 'A'] = 1;
   table_v[command[0] - 'A'] = result[0];
   return;
  }
  else {
   printf("= Undefined Symbol\n");
   return;
  }
 }

 // 양쪽다 아닌경우
 printf("= Undefined Symbol\n");
 return;
}

void aCommand(char *command)
{
 char *afname[4] = {
  "ADD", "MUL", "AVG", "STD" };
 int i, j, k;
 int co = 0, ca = 0;
 char o[100], a[100];
 double result[20], r2[20];

 for (i = 0; i < 4; ++i) {
  if (whereis(command, afname[i]) == 0)
   break;
 }

 result[1] = 1;
 // 명령이 afname 에 서술된 함수를 포함하고 있으면
 // 총합, 총곱, 평균, 표준편차를 구한다
 // result[0]는 총합, result[1]는 총곱,
 // result[2]는 평균, result[3]은 표준편차가 입력된다
 if (i < 4) {
  for (j = 0; j < length_a[command[4] - 'A']; ++j) {
   result[0] += table_a[command[4] - 'A'][j];
   result[1] *= table_a[command[4] - 'A'][j];
   result[3] += (table_a[command[4] - 'A'][j] * table_a[command[4] - 'A'][j]);
  }

  result[2] = result[0] / length_a[command[4] - 'A'];
  result[3] /= length_a[command[4] - 'A'];
  result[3] = result[3] - (result[0] * result[0]);

  printf("= %f\n", result[i]);
 }

 // 위의 경우가 아니면 배열의 사칙연산을 수행한다
 // result는 전반적인 연산을 위한 배열이고,
 // r2는 부분적인 연산을 위한 배열인다.
 // 이 말은, result로 계속 누산(누적 계산)을 하다가
 // 연산자의 우선순위가 바뀌는 경우, (이번 연산은 +-인데 다음 연산은 */인 경우)
 // 우선순위가 뒤집혀져 있는 동안 r2로 누산을 하여
 // result에 r2를 누산하여 준다
 else {
  for (i = 0; command[i] != '\0'; ++i)
   if (command[i] <= 'Z' && command[i] >= 'A') {
    a[ca++] = command[i] - 'A';
    ++i;
   }
   else if (is_in("+-*/", command[i]))
    o[co++] = command[i];

  // 다음 ERROR들을 처리한다

  // 연산식이 잘못된 경우
  // (배열변수의 갯수와 연산자의 갯수가 않맞는경우)
  if (!(ca == co + 1)) {
   printf("= Undefined Symbol\n");
   return;
  }

  // 배열 변수들 간에 갯수가 안맞는 경우
  // (AA + BB 에서 AA 는 3개, BB는 4개인 경우)
  for (i = 1; i < co; ++i)
   if (length_a[a[i]] != length_a[a[i - 1]]) {
    printf("= Undefined Symbol\n");
    return;
   }

  // 선언되지 않은 배열변수를 사용한 경우
  for (i = 0; i < co; ++i)
   if (length_a[a[i]] == 0) {
    printf("= Undefined Symbol\n");
    return;
   }

  for (k = 0; k < length_a[a[0]]; ++k)
   result[k] = table_a[a[0]][k];

  for (i = 0; i < co; ++i) {
   if (is_in("+-", o[i])) {
    if (is_in("*/", o[i + 1])) {
     for (k = 0; k < length_a[a[0]]; ++k)
      r2[k] = o[i + 1];

     for (j = i + 1; is_in("*/", o[j]); ++j)
      if (o[j] == '*')
       r2[k] *= table_a[a[j + 1]][k];
      else
       r2[k] /= table_a[a[j + 1]][k];

     for (k = 0; k < length_a[a[0]]; ++k)
      if (o[i] == '+')
       result[k] += r2[k];
      else
       result[k] -= r2[k];
     i = j - 1;
    }
    else
     for (k = 0; k < length_a[a[0]]; ++k)
      if (o[i] == '+')
       result[k] += table_a[a[i + 1]][k];
      else
       result[k] -= table_a[a[i + 1]][k];
   }
   else  {
    for (k = 0; k < length_a[a[0]]; ++k)
     if (o[i] == '*')
      result[k] *= table_a[a[i + 1]][k];
     else
      result[k] /= table_a[a[i + 1]][k];
   }
  }
  printf("= ");
  for (k = 0; k < length_a[a[0]]; ++k)
   printf("%f ", result[k]);
  printf("\n");
 }

}

double funcArit(int FuncIndex, double x)
{
 // 수학 함수를 호출한다
 // 전역 변수로 선언된 fname배열에
 // 사용 가능한 수학 함수를 대문자로 정의한 후
 // 아래의 switch-case문에 입력하면 된다
 switch (FuncIndex) {
 case 0: return acos(x);
 case 1: return asin(x);
 case 2: return atan(x);

 case 3: return cos(x);
 case 4: return sin(x);
 case 5: return tan(x);

 case 6: return cosh(x);
 case 7: return sinh(x);
 case 8: return tanh(x);

  // case 9 : return acosh(x);
  // case 10 : return asinh(x);
  // case 11 : return atanh(x);

 case 12: return exp(x);
 case 13: return log(x);
 case 14: return log10(x);

 case 15: return sqrt(x);
 case 16: return fabs(x);
 case 17: return floor(x);
 default: return 0;
 }
}
